import React, { useState, useEffect } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInWithCustomToken, signInAnonymously, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, collection, addDoc, onSnapshot, query, where } from 'firebase/firestore';

// Spinner Component for loading states
const Spinner = () => (
  <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-white"></div>
);

// Main App Component
const App = () => {
  const [topic, setTopic] = useState('');
  const [step, setStep] = useState(1);
  const [proficiency, setProficiency] = useState('Beginner');
  const [source, setSource] = useState('Academic Papers');
  const [textLength, setTextLength] = useState('Short (5 Pages with Quick Sentences)');
  const [scrollDirection, setScrollDirection] = useState('sidescroll');
  const [summary, setSummary] = useState('');
  const [storybook, setStorybook] = useState([]);
  const [loading, setLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  const [savedStories, setSavedStories] = useState([]);
  const [isAuthReady, setIsAuthReady] = useState(false);
  const [db, setDb] = useState(null);
  const [auth, setAuth] = useState(null);
  const [userId, setUserId] = useState(null);

  // Images for the bookshelf. Using /uc?export=view&id= to make them directly usable.
  const bookshelfImages = [
    "https://drive.google.com/uc?export=view&id=1am8sah6UH1RqZkR3Tty5cBftr0XEbWXZ",
    "https://images.vexels.com/media/users/3/286663/isolated/preview/ae7fcb5050a3c8a7e2800a3c9a50bf32-bordeaux-book-spine-color-stroke.png",
  ];

  // Firebase Initialization and Authentication
  useEffect(() => {
    try {
      const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
      const app = initializeApp(firebaseConfig);
      const authInstance = getAuth(app);
      const dbInstance = getFirestore(app);
      setAuth(authInstance);
      setDb(dbInstance);

      onAuthStateChanged(authInstance, async (user) => {
        if (user) {
          setUserId(user.uid);
          setIsAuthReady(true);
        } else {
          try {
            if (typeof __initial_auth_token !== 'undefined') {
              await signInWithCustomToken(authInstance, __initial_auth_token);
            } else {
              await signInAnonymously(authInstance);
            }
          } catch (error) {
            console.error("Firebase authentication failed:", error);
            setIsAuthReady(true);
          }
        }
      });
    } catch (error) {
      console.error("Firebase initialization failed:", error);
      setIsAuthReady(true);
    }
  }, []);

  // Fetch saved stories from Firestore
  useEffect(() => {
    if (db && isAuthReady && userId) {
      const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
      const storiesCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/stories`);
      const q = query(storiesCollectionRef);
      const unsubscribe = onSnapshot(q, (snapshot) => {
        const stories = [];
        snapshot.forEach((doc) => {
          stories.push({ id: doc.id, ...doc.data() });
        });
        setSavedStories(stories);
      }, (error) => {
        console.error("Error fetching stories:", error);
      });
      return () => unsubscribe();
    }
  }, [db, isAuthReady, userId]);

  // Reset error message whenever the step changes
  useEffect(() => {
    setErrorMessage('');
  }, [step]);
  
  // --- API Call Logic ---

  // A utility function for API calls with exponential backoff
  const fetchWithBackoff = async (url, payload, retries = 3, delay = 1000) => {
    try {
      const response = await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload),
      });
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return await response.json();
    } catch (error) {
      if (retries > 0) {
        await new Promise(res => setTimeout(res, delay));
        return fetchWithBackoff(url, payload, retries - 1, delay * 2);
      } else {
        console.error("API call failed after multiple retries:", error);
        setErrorMessage("Sorry, something went wrong while contacting the AI. Please try again.");
        setLoading(false);
        throw error;
    }
  }
  };

  const generateSummary = async () => {
    if (!proficiency || !source || !textLength || !scrollDirection) {
      setErrorMessage("Please select all options.");
      return;
    }
    setLoading(true);
    setErrorMessage('');
    setStep(3); // Move to loading step

    const apiKey = ""; // API key is handled by the environment
    const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
    
    const systemPrompt = `You are an expert researcher. Your task is to provide a concise, single-paragraph summary of a topic based on a specified source and for a specific audience.`;
    const userQuery = `Identify the core concepts about "${topic}". Generate a text summary explaining these concepts and theories for a ${proficiency} level audience, assuming the information comes from a ${source}.`;

    const payload = {
      contents: [{ parts: [{ text: userQuery }] }],
      systemInstruction: { parts: [{ text: systemPrompt }] },
    };

    try {
      const result = await fetchWithBackoff(apiUrl, payload);
      const text = result.candidates?.[0]?.content?.parts?.[0]?.text;
      if (text) {
        setSummary(text);
        setStep(4);
      } else {
        throw new Error("Invalid response structure from summary API.");
      }
    } catch (error) {
      setStep(2); // Go back to the form if it fails
    } finally {
      setLoading(false);
    }
  };

  const generateSpecificImagePrompt = async (storyContent) => {
    const textApiKey = ""; // API key is handled by the environment
    const textApiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${textApiKey}`;

    const prompt = `Given the following storybook page description: "${storyContent}", create a single, detailed visual description for a comic book panel illustration. Break down the scene into 1-3 distinct panels, focusing on the visual elements and actions. The output should be a single string combining these descriptions, e.g., "Panel 1: [description]. Panel 2: [description]..."`;

    const payload = {
      contents: [{ parts: [{ text: prompt }] }],
    };

    try {
      const result = await fetchWithBackoff(textApiUrl, payload);
      return result.candidates?.[0]?.content?.parts?.[0]?.text || storyContent;
    } catch (error) {
      console.error("Failed to generate specific image prompt:", error);
      return storyContent; // Fallback to original content
    }
  };

  const generateStorybook = async () => {
    setLoading(true);
    setErrorMessage('');
    setStep(5); // Go directly to the storybook view
  
    const textApiKey = ""; // API key is handled by the environment
    const textApiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${textApiKey}`;
    
    const numPages = textLength === 'Full Chapter' ? 30 : 5;
    const isExpert = proficiency === 'Expert';
    const contentStyle = isExpert
      ? (textLength === 'Short (5 Pages with Quick Sentences)' ? "a concise, two-sentence explanation." : "a detailed, complex paragraph focusing on a specific sub-topic.")
      : (textLength === 'Short (5 Pages with Quick Sentences)' ? "exactly two sentences describing a part of the story." : "a short paragraph describing a visual scene.");

    const storyPrompt = isExpert
      ? `Based on the following summary: "${summary}", provide a ${numPages}-part analytical breakdown of "${topic}". Each part should be an object with a unique "id", a "title", and ${contentStyle} The content should be written in a formal, academic tone, suitable for a technical paper.`
      : `Based on the following summary: "${summary}", create a ${numPages}-page storybook about "${topic}". Each page should be an object with a unique "id", a "title", and ${contentStyle} The content should be a cohesive part of the overall narrative, suitable for a children's storybook.`;

    
    const textPayload = {
        contents: [{ parts: [{ text: storyPrompt }] }],
        generationConfig: {
            responseMimeType: "application/json",
            responseSchema: {
                type: "ARRAY",
                items: {
                    type: "OBJECT",
                    properties: {
                        "id": { "type": "NUMBER" },
                        "title": { "type": "STRING" },
                        "content": { "type": "STRING" }
                    },
                    required: ["id", "title", "content"]
                }
            }
        }
    };

    try {
        const result = await fetchWithBackoff(textApiUrl, textPayload);
        const jsonText = result.candidates?.[0]?.content?.parts?.[0]?.text;
        if (!jsonText) throw new Error("Failed to generate story content.");
        
        // The LLM returns a JSON string, so we must parse it.
        const storyPages = JSON.parse(jsonText);

        const initialStorybookState = storyPages.map(page => ({
            ...page,
            imageUrl: null,
            imageLoading: true
        }));
        setStorybook(initialStorybookState);
        setLoading(false); // Main loading is done, now load images individually

        // Fetch images for each page
        storyPages.forEach(async page => {
          const specificPrompt = await generateSpecificImagePrompt(page.content);
          generateImageForPage(page.id, specificPrompt);
        });

    } catch (error) {
        setErrorMessage("Failed to generate the story's text. Please try again.");
        setStep(4); // Go back
    }
  };

  const generateImageForPage = async (pageId, imagePrompt) => {
    const imageApiKey = ""; // API key is handled by the environment
    const imageApiUrl = `https://generativelanguage.googleapis.com/v1beta/models/imagen-3.0-generate-002:predict?key=${imageApiKey}`;
    
    const finalPrompt = `A high-quality, visually stunning comic book panel illustration for a storybook. ${imagePrompt}. Focus on vibrant, digital art with clear outlines and a dynamic composition.`;
    
    const imagePayload = { 
        instances: [{ prompt: finalPrompt }],
        parameters: { "sampleCount": 1 }
    };

    try {
        const result = await fetchWithBackoff(imageApiUrl, imagePayload);
        const base64Data = result.predictions?.[0]?.bytesBase64Encoded;

        if (base64Data) {
            const imageUrl = `data:image/png;base64,${base64Data}`;
            setStorybook(prev => prev.map(p => p.id === pageId ? { ...p, imageUrl, imageLoading: false } : p));
        } else {
            throw new Error("Invalid image data structure.");
        }
    } catch (error) {
        console.error(`Failed to generate image for page ${pageId}:`, error);
        // Set a placeholder on failure
        setStorybook(prev => prev.map(p => p.id === pageId ? { ...p, imageUrl: `https://placehold.co/600x400/FF0000/FFFFFF?text=Image+Failed`, imageLoading: false } : p));
    }
  };

  const saveStory = async () => {
    if (db && userId) {
      const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
      const randomImageUrl = bookshelfImages[Math.floor(Math.random() * bookshelfImages.length)];
      try {
        await addDoc(collection(db, `artifacts/${appId}/users/${userId}/stories`), {
          topic: topic,
          summary: summary,
          proficiency: proficiency,
          textLength: textLength,
          scrollDirection: scrollDirection,
          pages: JSON.stringify(storybook), // FIX: Serialize the array
          imageUrl: randomImageUrl,
          createdAt: new Date(),
        });
        console.log("Story saved successfully!");
      } catch (e) {
        console.error("Error adding document: ", e);
      }
    }
    setStep(1);
    setTopic('');
    setProficiency('');
    setSource('');
    setStorybook([]);
  };

  const loadStory = (story) => {
    setTopic(story.topic);
    setSummary(story.summary);
    setProficiency(story.proficiency);
    setSource(story.source);
    setTextLength(story.textLength);
    setScrollDirection(story.scrollDirection);
    try {
      setStorybook(JSON.parse(story.pages)); // FIX: Parse the serialized data
    } catch (e) {
      console.error("Failed to parse story pages:", e);
      setStorybook([]);
    }
    setStep(5);
  };

  const returnHome = () => {
    setStep(1);
    setTopic('');
    setProficiency('');
    setSource('');
    setStorybook([]);
  };


  // --- Render Logic ---

  const renderStep = () => {
    if (loading && (step === 3 || (step === 5 && storybook.length === 0))) {
        return (
          <div className="text-center flex flex-col items-center justify-center text-white">
            <h2 className="text-2xl font-bold mb-4">
                {step === 3 ? "Generating Text Summary..." : "Crafting your story..."}
            </h2>
            <Spinner />
          </div>
        );
    }
    
    switch (step) {
      case 1:
        return (
          <div className="w-full max-w-2xl mx-auto p-8 rounded-xl">
             <div className="relative mb-8 bg-gray-900/40 backdrop-blur-sm rounded-xl p-6 shadow-2xl overflow-hidden min-h-[300px]">
                <div className="absolute inset-0 z-0">
                    <div className="h-full w-full bg-gradient-to-t from-gray-900/60 to-transparent"></div>
                </div>
                {isAuthReady ? (
                    <div className="relative w-full h-64">
                         {savedStories.length > 0 ? (
                            <div className="flex flex-wrap justify-center gap-4 relative z-10">
                                {savedStories.map(story => (
                                    <div
                                        key={story.id}
                                        className="w-24 h-40 rounded-lg shadow-xl relative transform transition-transform hover:scale-105 cursor-pointer overflow-hidden group"
                                        onClick={() => story.pages ? loadStory(story) : console.log(`Clicked on dummy story: ${story.topic}`)}
                                        title={story.topic}
                                    >
                                        <img
                                        src={story.imageUrl}
                                        alt={story.topic}
                                        className="absolute inset-0 w-full h-full object-cover transition-transform duration-300 group-hover:scale-110"
                                        />
                                        <div className="absolute top-0 left-0 w-full h-full p-2 flex items-center justify-center transform rotate-90 origin-bottom-left whitespace-nowrap">
                                          <h3 className="text-white text-sm font-semibold leading-tight absolute transform -rotate-90 origin-bottom-left top-full left-0 mt-2 px-2">
                                            {story.topic}
                                          </h3>
                                        </div>
                                    </div>
                                ))}
                            </div>
                         ) : (
                             // Message when bookshelf is empty
                            <div className="flex items-center justify-center h-full">
                              <p className="text-gray-300 text-center relative z-10">
                                Your bookshelf is empty. Create a story to fill it!
                              </p>
                            </div>
                         )}
                    </div>
                ) : (
                    <div className="flex items-center justify-center h-full">
                       <p className="text-gray-300 text-center relative z-10">
                        Loading your bookshelf...
                      </p>
                    </div>
                )}
            </div>
            <div className="w-full max-w-2xl mx-auto bg-gray-900 p-8 rounded-xl shadow-lg">
                <h2 className="text-2xl font-bold mb-6 text-center text-white">What topic are you interested in?</h2>
                <form onSubmit={(e) => { e.preventDefault(); if (topic) setStep(2); }}>
                  <input
                    type="text"
                    value={topic}
                    onChange={(e) => setTopic(e.target.value)}
                    className="w-full px-4 py-3 border border-gray-700 bg-gray-800 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition placeholder-gray-400"
                    placeholder="e.g., Quantum Computing, Stoic Philosophy..."
                  />
                  <button
                    type="submit"
                    disabled={!topic}
                    className="w-full mt-6 bg-blue-600 text-white py-3 rounded-lg font-semibold hover:bg-blue-700 transition-all disabled:bg-gray-700 disabled:cursor-not-allowed transform hover:scale-105"
                  >
                    Next
                  </button>
                </form>
            </div>
          </div>
        );
      case 2:
        return (
          <div className="w-full max-w-2xl mx-auto bg-gray-900 p-8 rounded-xl shadow-lg">
            <h2 className="text-2xl font-bold mb-6 text-center text-white">Scope of your Topic</h2>
            <div className="space-y-6">
                <div>
                    <label className="block text-white font-semibold mb-2">Proficiency Level</label>
                    <select value={proficiency} onChange={(e) => setProficiency(e.target.value)} className="w-full px-4 py-3 border border-gray-700 bg-gray-800 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                      <option value="">Select a level...</option>
                      <option value="Beginner">Beginner (New to the topic)</option>
                      <option value="Intermediate">Intermediate (Somewhat proficient)</option>
                      <option value="Expert">Expert (Deep knowledge)</option>
                    </select>
                </div>
                <div>
                    <label className="block text-white font-semibold mb-2">Preferred Source</label>
                    <select value={source} onChange={(e) => setSource(e.target.value)} className="w-full px-4 py-3 border border-gray-700 bg-gray-800 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                      <option value="">Select a source type...</option>
                      <option value="Academic Papers">Academic Papers (e.g., Nature)</option>
                      <option value="Existing Newsletters">Existing Newsletters (e.g., Lenny's Newsletter)</option>
                    </select>
                </div>
                <div>
                    <label className="block text-white font-semibold mb-2">Text Output Length</label>
                    <select value={textLength} onChange={(e) => setTextLength(e.target.value)} className="w-full px-4 py-3 border border-gray-700 bg-gray-800 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                      <option value="">Select length...</option>
                      <option value="Short (5 pages with Detailed Paragraphs)">Short (5 pages with Detailed Paragraphs)</option>
                      <option value="Short (5 Pages with Quick Sentences)">Short (5 Pages with Quick Sentences)</option>
                      <option value="Full Chapter">Full Chapter (30 pages)</option>
                    </select>
                </div>
                <div>
                    <label className="block text-white font-semibold mb-2">Scroll Direction</label>
                    <select value={scrollDirection} onChange={(e) => setScrollDirection(e.target.value)} className="w-full px-4 py-3 border border-gray-700 bg-gray-800 text-white rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                      <option value="">Select a direction...</option>
                      <option value="sidescroll">Side Scroll</option>
                      <option value="downscroll">Down Scroll</option>
                    </select>
                </div>
            </div>
            {errorMessage && <p className="text-red-500 text-center mt-4">{errorMessage}</p>}
            <button onClick={generateSummary} className="w-full mt-8 bg-blue-600 text-white py-3 rounded-lg font-semibold hover:bg-blue-700 transition-all transform hover:scale-105">
                Generate Summary
            </button>
          </div>
        );
      case 4:
        return (
          <div className="w-full max-w-2xl mx-auto bg-gray-800 text-white p-8 rounded-xl shadow-lg text-center">
            <h2 className="text-2xl font-bold mb-4">Generated Text Summary</h2>
            <p className="bg-gray-900 text-gray-200 p-6 rounded-lg mb-6 text-left">{summary}</p>
            {errorMessage && <p className="text-red-500 text-center mb-4">{errorMessage}</p>}
            <button onClick={generateStorybook} className="w-full bg-indigo-600 text-white py-3 rounded-lg font-semibold hover:bg-indigo-700 transition-all transform hover:scale-105">
              Generate {textLength === 'Full Chapter' ? '30-page' : '5-page'} Storybook
            </button>
          </div>
        );
      case 5:
        const scrollClasses = scrollDirection === 'sidescroll' 
          ? 'flex overflow-x-auto space-x-6 p-4 rounded-xl' 
          : 'flex flex-col space-y-6 p-4 rounded-xl';
        
        return (
          <div className="w-full">
            <h2 className="text-3xl font-bold mb-2 text-center text-white">Your Story: {topic}</h2>
            <p className="text-center text-gray-300 mb-6">
                {scrollDirection === 'sidescroll' ? 'Scroll horizontally to view your comic book.' : 'Scroll down to view your comic book.'}
            </p>
            <div className={`${scrollClasses} bg-gray-900/20 backdrop-blur-sm`}>
              {storybook.map((page, index) => (
                <div 
                  key={page.id || index} 
                  className={`bg-white rounded-lg shadow-2xl overflow-hidden transform transition-all hover:scale-105 hover:shadow-blue-300 ${scrollDirection === 'sidescroll' ? 'flex-shrink-0 w-80 md:w-96' : 'w-full'}`}
                >
                    <div className={`w-full ${scrollDirection === 'downscroll' ? 'h-[48rem]' : 'h-64'} bg-gray-200 flex items-center justify-center`}>
                        {page.imageLoading ? <Spinner /> : <img src={page.imageUrl} alt={page.title} className="w-full h-full object-cover" />}
                    </div>
                    <div className="p-4">
                        <h3 className="text-lg font-bold text-gray-800">{index + 1}. {page.title}</h3>
                        <p className="text-gray-600 mt-2 text-sm">{page.content}</p>
                    </div>
                </div>
              ))}
            </div>
             <div className="flex flex-col sm:flex-row justify-center space-y-4 sm:space-y-0 sm:space-x-4 mt-8">
                <button onClick={saveStory} className="bg-green-600 text-white py-3 px-8 rounded-lg font-semibold hover:bg-green-700 transition-colors">
                    Save Story
                </button>
                <button onClick={returnHome} className="bg-gray-600 text-white py-3 px-8 rounded-lg font-semibold hover:bg-gray-700 transition-colors">
                    Return to Home
                </button>
            </div>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div
      className="min-h-screen font-sans flex items-center justify-center p-4"
      style={{ backgroundImage: `url('https://wallpapers.com/images/hd/clear-view-of-blue-and-purple-galaxy-vqbu4jz7r0gwd616.jpg')`, backgroundSize: 'cover', backgroundPosition: 'center' }}
    >
      <div className="w-full max-w-5xl">
        {step !== 5 && (
            <div className="p-4 mb-8 bg-black/50 backdrop-blur-sm rounded-xl max-w-2xl mx-auto shadow-xl">
                <h1 className="text-2xl font-bold text-center text-white">
                    Generate your own comic book to learn about anything
                </h1>
            </div>
        )}
        {renderStep()}
      </div>
    </div>
  );
};

export default App;
